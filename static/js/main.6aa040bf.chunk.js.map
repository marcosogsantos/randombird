{"version":3,"sources":["serviceWorker.js","home.js","index.js"],"names":["Boolean","window","location","hostname","match","componentDecorator","href","text","key","rel","target","Home","state","input_url","undefined","tweets","aux_tweets_length","loading","handleSubmit","bind","handleInputChanges","windowUrl","search","user","URLSearchParams","get","this","getArticleText","e","setState","value","get_random_tweet","preventDefault","fetch","method","then","response","json","responseJson","username","concat","catch","err","console","log","tweetObj","entities","urls","forEach","element","replace","url","expanded_url","map","v","k","tweetDate","created_at","split","year","length","slice","join","className","get_text_with_expanded_links","style","fontSize","color","xmlns","width","height","viewBox","fill","d","favorite_count","retweet_count","id","id_str","role","fontFamily","left","position","top","onSubmit","maxWidth","placeholder","type","onChange","required","whiteSpace","loading_builder","t_builder","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6aa040bf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Linkify from 'react-linkify';\nimport \"./bootstrap.css\"\n\nconst componentDecorator = (href, text, key) => (\n  <a href={href} key={key} rel=\"noopener noreferrer\" target=\"_blank\">\n    {text}\n  </a>\n);\n\nexport default class Home extends Component {\n  constructor() {\n    super()\n    this.state = {\n      input_url: undefined,\n      tweets: [],\n      aux_tweets_length: 0,\n      loading: false,\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleInputChanges = this.handleInputChanges.bind(this)\n  }\n\n  componentDidMount() {\n    const windowUrl = window.location.search;\n    const params = new URLSearchParams(windowUrl);\n    const user = params.get('user')\n    if (user) {\n      this.getArticleText(user)\n    }\n  }\n\n  handleInputChanges(e) {\n    this.setState({ input_url: e.target.value })\n  }\n\n  handleSubmit(e) {\n    this.setState({ loading: true })\n    this.get_random_tweet(this.state.input_url)\n    e.preventDefault();\n  }\n\n  get_random_tweet(user) {\n    let final_url = 'https://get-random-tweet-api.herokuapp.com/?user=' + user\n    fetch(final_url, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        responseJson.username = user;\n        this.setState({\n          tweets: [responseJson].concat(this.state.tweets),\n          loading: false,\n        })\n      })\n      .catch((err) => console.log(err))\n  }\n\n  get_text_with_expanded_links(tweetObj) {\n    tweetObj.entities.urls.forEach(element => {\n      tweetObj.text = tweetObj.text.replace(element.url, element.expanded_url)\n    });\n    return tweetObj.text\n  }\n\n  t_builder() {\n    return (\n      this.state.tweets.map((v, k) => {\n        let tweetDate = v.created_at.split(\" \")\n        let year = tweetDate[tweetDate.length - 1]\n        tweetDate = tweetDate.slice(1, 3)\n        tweetDate = tweetDate.concat(year).join(\" \")\n        return (\n          <div className='card p-3 shadow-sm mt-3' key={k}>\n            <a target='blank_' href={'https://twitter.com/' + v.username}>@{v.username}</a>\n            <div>\n              <Linkify componentDecorator={componentDecorator}>\n                {this.get_text_with_expanded_links(v)}\n              </Linkify>\n            </div>\n            <div style={{ fontSize: 14 }}>\n              <span style={{ color: \"grey\" }}>\n                \n                <span className=\"pr-2\">\n                  <svg className=\"pr-1 pb-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"17\" viewBox=\"0 0 1792 1792\" fill=\"currentColor\"><path d=\"M896 1664q-26 0-44-18l-624-602q-10-8-27.5-26t-55.5-65.5-68-97.5-53.5-121-23.5-138q0-220 127-344t351-124q62 0 126.5 21.5t120 58 95.5 68.5 76 68q36-36 76-68t95.5-68.5 120-58 126.5-21.5q224 0 351 124t127 344q0 221-229 450l-623 600q-18 18-44 18z\"/></svg>\n                  {v.favorite_count}\n                </span>\n                \n                <span className=\"pr-2\">\n                <svg className=\"pr-1  pb-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" viewBox=\"0 0 2048 1792\" fill=\"currentColor\"><path d=\"M1344 1504q0 13-9.5 22.5t-22.5 9.5h-960q-8 0-13.5-2t-9-7-5.5-8-3-11.5-1-11.5v-600h-192q-26 0-45-19t-19-45q0-24 15-41l320-384q19-22 49-22t49 22l320 384q15 17 15 41 0 26-19 45t-45 19h-192v384h576q16 0 25 11l160 192q7 10 7 21zm640-416q0 24-15 41l-320 384q-20 23-49 23t-49-23l-320-384q-15-17-15-41 0-26 19-45t45-19h192v-384h-576q-16 0-25-12l-160-192q-7-9-7-20 0-13 9.5-22.5t22.5-9.5h960q8 0 13.5 2t9 7 5.5 8 3 11.5 1 11.5v600h192q26 0 45 19t19 45z\"/></svg>\n                  {v.retweet_count}\n                </span>\n\n                <span className=\"pr-2\">{tweetDate}</span>\n              </span>\n              <a rel=\"noopener noreferrer\" target=\"_blank\" href={\"https://twitter.com/\" + v.user.id + \"/status/\" + v.id_str}> Go to tweet</a>\n            </div>\n          </div>)\n      })\n    )\n  }\n\n  loading_builder() {\n    if (this.state.loading) {\n      return (\n        <div className=\"ml-2 spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div style={{ fontSize: 45, fontFamily: 'Pacifico, cursive', left: -8, position: \"relative\" }} className='title mt-5 text-left col'>Random Bird</div>\n        <div style={{ fontSize: 14, top: -10, color: 'grey' }} className='col sub-title d-block'>by <a target=\"blank_\" href=\"https://twitter.com/marcosogsantos\">@marcosogsantos</a></div>\n        <div className='row mt-2'>\n          <div className='col form-class m-0 pr-0'>\n            <form className='form-inline' onSubmit={this.handleSubmit} style={{ maxWidth: 700 }}>\n              <div className='row container-fluid '>\n                <div className='col-sm-6 text-center m-0 pr-0'>\n                  <div className=\"input-group mb-2\">\n                    <div className=\"input-group-prepend\">\n                      <div className=\"input-group-text\">@</div>\n                    </div>\n                    <input placeholder=\"username\" className=\"d-inline form-control\" type=\"text\" value={this.state.input_url} onChange={this.handleInputChanges} required />\n                  </div>\n                </div>\n                <div style={{}} className='col-sm-3 m-0 p-0 text-center'>\n                  <button type=\"submit\" style={{ whiteSpace: 'nowrap' }} className=\"btn ml-2 btn-primary\">Get some tweet</button>\n                </div>\n                <div className='loading col-sm text-center mt-1'>\n                  {this.loading_builder()}\n                </div>\n              </div>\n            </form>\n            <div className='m-3'>\n              {this.t_builder()}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './home';\n\nReactDOM.render(\n<Home/>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}