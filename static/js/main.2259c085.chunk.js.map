{"version":3,"sources":["serviceWorker.js","home.js","index.js"],"names":["Boolean","window","location","hostname","match","componentDecorator","href","text","key","rel","target","Home","state","input_url","undefined","tweets","aux_tweets_length","loading","handleSubmit","bind","handleInputChanges","windowUrl","search","user","URLSearchParams","get","this","getArticleText","e","setState","value","get_random_tweet","preventDefault","url","fetch","method","then","response","json","responseJson","concat","catch","err","console","log","map","v","k","className","style","fontSize","color","link","class","role","fontFamily","left","position","top","onSubmit","maxWidth","placeholder","type","onChange","required","whiteSpace","loading_builder","t_builder","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2259c085.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Linkify from 'react-linkify';\nimport \"./bootstrap.css\"\n\nconst componentDecorator = (href, text, key) => (\n  <a href={href} key={key} rel=\"noopener noreferrer\" target=\"_blank\">\n    {text}\n  </a>\n);\n\nexport default class Home extends Component {\n  constructor() {\n    super()\n    this.state = {\n      input_url:undefined,\n      tweets:[],\n      aux_tweets_length:0,\n      loading:false,\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleInputChanges = this.handleInputChanges.bind(this)\n  }\n  \n  componentDidMount() {\n    const windowUrl = window.location.search;\n    const params = new URLSearchParams(windowUrl);\n    const user = params.get('user')\n    if(user){\n      this.getArticleText(user)\n    }    \n  }\n\n  handleInputChanges(e){\n    this.setState({input_url:e.target.value})\n  }\n\n  handleSubmit(e){\n    this.setState({loading:true})\n    this.get_random_tweet(this.state.input_url)\n    e.preventDefault();\n  }\n\n  get_random_tweet(url) {\n    let final_url = 'https://get-random-tweet-api.herokuapp.com/?user='+url\n    fetch(final_url, {\n      method: 'GET',\n    })\n    .then((response)=> response.json())\n    .then((responseJson) => {\n      this.setState({\n        tweets:[responseJson].concat(this.state.tweets),\n        loading:false,\n      })\n    })\n    .catch((err) => console.log(err))\n  }\n\n  t_builder(){\n    return (\n      this.state.tweets.map((v,k)=>{\n        return (\n        <div className='card p-3 shadow-sm mt-3' key={k}>\n          <a target='blank_' href={'https://twitter.com/' + v.user}>@{v.user}</a>\n          <div>\n            <Linkify componentDecorator={componentDecorator}>\n              {v.text}\n            </Linkify>\n          </div>\n          <div style={{fontSize:14}}>\n          <span style={{color:\"grey\"}}></span>\n            <a rel=\"noopener noreferrer\" target=\"_blank\" href={v.link}> Go to tweet</a>\n          </div>\n        </div>)\n      })\n    )\n  }\n\n  loading_builder(){\n    if (this.state.loading){\n      return (\n        <div class=\"ml-2 spinner-border text-primary\" role=\"status\">\n          <span class=\"sr-only\">Loading...</span>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n\n  render() {\n      return (\n        <div className='container'>\n          <div style={{fontSize:45,fontFamily:'Pacifico, cursive', left:-8, position:\"relative\"}} className='title mt-5 text-left col'>Random Bird</div>\n          <div style={{fontSize:14,top:-10,color:'grey'}} className='col sub-title d-block'>by <a target=\"blank_\" href=\"https://twitter.com/marcosogsantos\">@marcosogsantos</a></div>\n          <div className='row mt-2'>\n            <div className='col form-class m-0 pr-0'>\n              <form className='form-inline'onSubmit={this.handleSubmit} style={{maxWidth:700}}>\n                <div className='row container-fluid '>\n                  <div className='col-sm-6 text-center m-0 pr-0'>\n                    <div class=\"input-group mb-2\">\n                      <div class=\"input-group-prepend\">\n                        <div class=\"input-group-text\">@</div>\n                      </div>\n                      <input placeholder=\"username\" className=\"d-inline form-control\" type=\"text\" value={this.state.input_url} onChange={this.handleInputChanges} required/>\n                    </div>\n                  </div>\n                  <div style={{}} className='col-sm-3 m-0 p-0 text-center'>\n                    <button type=\"submit\"  style={{whiteSpace:'nowrap'}} class=\"btn ml-2 btn-primary\">Get some tweet</button>\n                  </div>\n                  <div className='loading col-sm text-center mt-1'>\n                    {this.loading_builder()}\n                  </div>\n                </div>\n              </form>\n              <div className='m-3'> \n                {this.t_builder()}\n              </div>\n            </div>\n          </div>          \n        </div>\n      )\n  }}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './home';\n\nReactDOM.render(\n<Home/>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}